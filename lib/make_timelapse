#!/bin/bash
__scriptVersion=1.0
__scriptPID=$$
__scriptPath="$(cd "$(dirname "$0")"; pwd -P )"
__scriptFile="$(basename "$0")"

# Function ===================================================================== 
#           Name:  make_timelapse
#         Author:  Rusty Gibbs 
#       Homepage:  http://www.wickedidol.com
#            Git:  https://github.com/fenchurch/TimeLapse.git
#        Created:  2019-02-02
#       Modified:  2019-02-08
# ==============================================================================
# usage & man ==============================================================={{{
usage="usage:
    $__scriptFile [] <name>"
manual="
NAME
    make_timelapse -- make timelapse h264 video of sequential images

SYNOPSIS
    make_timelapse [-d int | [-s date] [-e date]] [-f int] [-v path] [-i path] image_prefix

    make_timelapse -h | --help 
    
    make_timelapse --version | -V 

DESCRIPTION
    make_timelapse uses sequnetial images from the image path defined in the config file

    -d  int
    --day_range
        start date set to n days from today, end date set to today

    -s  date in MM/DD/YYYY format
    --start_date
        sets the search criteria to find files starting at the set date

    -e  date in MM/DD/YYYY format
    --end_date
        sets the search criteria to find files until the end of the set date

    -f  int
    --framerate
        frames per second each image uses. eg 30 = .0333 seconds, 1 = 1 second

    -v  path
    --videos
        path where outputed timelapse will be stored
    
    -i  path
    --images
        path where images for timelapse creation are stored

    -o  string
    --override_name
        override the output name

    -h
    --help
        show this help file

    -V
    --version
        version of this script

EXAMPLE
    
    Timelapse the last week of images store in images path, prefixed with the name 'capture'
    time_lapse -d 7 'capture'

    Timelapse today
    timelapse 'capture'

    Timelapse from New Years Day to New Years eve last year at 5 fps
    timelapse -s 01/01/2018 -e 12/31/2018 -f 5 'capture'

"
# ===========================================================================}}}
# source files =============================================================={{{
source "$__scriptPath/defaults"
source "$__scriptPath/../conf"
# ===========================================================================}}}
realpath(){ echo "$(builtin cd $(dirname "$@") && pwd -P)/$(basename "$@")"; }
# default vars =============================================================={{{
log="$__scriptPath/_log"
tmp_path="$(realpath "$__scriptPath/../${TMP_PATH}")"
images_path="$(realpath "$__scriptPath/../$IMAGES_PATH")"
videos_path="$(realpath "$__scriptPath/../$VIDEOS_PATH")"
day_range=1
# ===========================================================================}}}
find_daterange(){
    if [[ $start =~ ([0-9]{1,2})/([0-9]{1,2})/([0-9]{2,4}) ]]; then
        m=$(leading_zeros ${BASH_REMATCH[1]})
        d=$(leading_zeros ${BASH_REMATCH[2]})
        y=$(leading_zeros ${BASH_REMATCH[3]})
        touch -t ${y}${m}${d}0000 "$tmp_path/start"
        start_find="-newer $tmp_path/start"
    fi
    if [[ $end =~ ([0-9]{1,2})/([0-9]{1,2})/([0-9]{2,4}) ]]; then
        m=$(leading_zeros ${BASH_REMATCH[1]})
        d=$(leading_zeros ${BASH_REMATCH[2]})
        y=$(leading_zeros ${BASH_REMATCH[3]})
        touch -t ${y}${m}${d}2359 "$tmp_path/end"
        end_find="! -newer $tmp_path/end"
    fi
    find "$images_path" -type f -name "$@*" $start_find $end_find -exec echo {} ";" | sort
    [ -f "$tmp_path/start" ] && rm "$tmp_path/start"
    [ -f "$tmp_path/end" ] && rm "$tmp_path/end"
}
leading_zeros(){
    digits=${2:-2}
    [[ ${#1} -lt $digits ]] \
        && printf "0%.0s${1}" {1..$digits} \
        || echo $1
}
days_ago(){
    days="$1"
    ! [[ "$days" =~ ^[0-9]+$ ]] && days=0 || :
    [[ `uname` == Darwin ]] \
        && date -v-${1}d +%m/%d/%Y \
        || date +%m/%d/%Y -d "${1} day ago"
}
main(){
    #if start isnt defined, check if day_range is set, 
    if [ -z $start ]; then
        start=$(days_ago $day_range)
        $log "Start: $start, End: $end"     
    fi
    #copy the images from the date range to the tmp directory
    find_daterange "$@" | while read file; do
        mv "$file" "$tmp_path"
    done
    output="$@ ${start//\//-}"
    if [ -z $end ]; then
        output+=" to $(date +%m-%d-%Y)"
    else
        output+=" to ${end//\//-}"
    fi
    [ ! -z "$override_name" ] && output="$override_name";
    output="$videos_path/$output"

    #create the timelapse from the images we just moved to tmp
    ffmpeg -hide_banner\
        -framerate ${framerate:-30}\
        -pattern_type glob -i "$tmp_path/$@*.jpg"\
        -c:v libx264\
        -r 30\
        -pix_fmt yuv420p\
        -y\
        "$output".mp4

    echo "$output"
    cd "$tmp_path"
    mkdir "$tmp_path/$output"
    mv *.jpg "$tmp_path/$output/" 
    zip -r "$videos_path/$output".zip "$output"
    mv "$tmp_path/$output/$@"* "$images_path"
    rm -r "$tmp_path/$output"
    #create a timelapse of all the images
    ffmpeg -hide_banner\
        -framerate ${framerate:-120}\
        -pattern_type glob -i "$images_path/$@*.jpg"\
        -c:v libx264\
        -r 30\
        -pix_fmt yuv420p\
        -y\
        "$output".mp4
   
}
while true; do
    case "$1" in
    --help      | -h ) echo "$manual"; exit 0;;
    --version   | -V ) echo "$__scriptFile -- Version $__scriptVersion"; exit 0;;
    --start_date| -s ) start="$2"; shift 2;;
    --end_date  | -e ) end="$2"; shift 2;;
    --day_range | -d ) day_range="$2"; shift 2;;
    --framerate | -f ) framerate="$2"; shift 2;;
    --videos    | -v ) videos_path="$2"; shift 2;;
    --images    | -i ) images_path="$2"; shift 2;;
    --override_name  | -o ) override_name="$2"; shift 2;;
    * ) break;;
    esac
done
if [[ -t 0 && $# -eq 0 ]]; then
    main
    exit 0
fi
echo "${@:-$(</dev/stdin)}" | while read line; do
    main "$line"
done
