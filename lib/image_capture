#!/bin/bash
__scriptVersion=1.0
__scriptPID=$$
__scriptPath="$(cd "$(dirname "$0")"; pwd -P )"
__scriptFile="$(basename "$0")"

# Function ===================================================================== 
#           Name:  image_capture
#         Author:  Rusty Gibbs 
#       Homepage:  http://www.wickedidol.com
#            Git:  https://github.com/fenchurch/TimeLapse.git
#        Created:  2019-02-02
#       Modified:  2019-02-05
# ==============================================================================
usage="usage:
    $__scriptFile [--p|p <path>] [--name|-n] <camera_url>"


# default vars =============================================================={{{
source "$__scriptPath/defaults"
source "$__scriptPath/../conf"
# ===========================================================================}}}


images_path="$__scriptPath/../$IMAGES_PATH"

# default vars =============================================================={{{
log="$__scriptPath/_log"
# ===========================================================================}}}
realpath(){ echo "$(builtin cd $(dirname "$1") && pwd -P)/$(basename "$1")"; }
check_dependencies(){
  if ! which ffmpeg 1>&-; then
    echo "missing dependency: ffmpeg\nPlease install and try again"
    exit 1
  elif [ ! -e "$__scriptPath/../conf" ]; then
    echo "Missing configuration file: ../conf"
    exit 2
  fi
}
main(){
    check_dependencies
    #if name is not set, use the hostname
    [ -z $name ] && name="$( sed \
        -e 's/^\(http:\/\/\)//' \
        -e 's/.*@//' \
        -e 's/\(\w*\)\/.*/\1/' \
        <<< "$1" )";
    
    #Output Filename to stdout
    output+="$images_path/$name - $(date +%s).jpg"
    output="$(realpath "$output")"
    #Get a single image from the camera
    echo "Capturing Image from $1" 1>&2 
    $log `ffmpeg -y -i "$1" -vframes 1 -hide_banner "$output" 2>&1`
    echo "$output"
}


while true; do
    case "$1" in
    --help  | -h ) echo "$usage"; exit 0;;
    --version| -V ) echo "$__scriptFile -- Version $__scriptVersion"; exit 0;;
    --path  | -p ) images_path="$2"; shift 2;;
    --name  | -n ) name="$2"; shift 2;;
    * ) break;;
    esac
done
if [[ -t 0 && $# -eq 0 ]]; then
    echo "$usage"
    exit 1
fi
echo "${@:-$(</dev/stdin)}" | while read line; do
    main "$line"
done
